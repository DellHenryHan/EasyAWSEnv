{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "",
    "Resources": {
        "DC": {
            "Type": "AWS::EC2::SpotFleet",
            "Properties": {
                "SpotFleetRequestConfigData": {
                    "IamFleetRole": { "Fn::ImportValue": "CiRoleArn" },
                    "SpotPrice": "0.5",
                    "TargetCapacity": 1,
                    "LaunchSpecifications": [{
                        "EbsOptimized": "true",
                        "InstanceType": "m4.large",
                        "ImageId": { "Fn::GetAtt": ["GetDcImageId", "imageId"] },
                        "BlockDeviceMappings": [{
                                "DeviceName": "/dev/sda1",
                                "Ebs": {
                                    "VolumeSize": "48",
                                    "VolumeType": "gp2"
                                }
                            },
                            { "DeviceName": "xvdca", "NoDevice": "" }, { "DeviceName": "xvdcb", "NoDevice": "" }, { "DeviceName": "xvdcc", "NoDevice": "" }, { "DeviceName": "xvdcd", "NoDevice": "" }, { "DeviceName": "xvdce", "NoDevice": "" },
                            { "DeviceName": "xvdcf", "NoDevice": "" }, { "DeviceName": "xvdcg", "NoDevice": "" }, { "DeviceName": "xvdch", "NoDevice": "" }, { "DeviceName": "xvdci", "NoDevice": "" }, { "DeviceName": "xvdcj", "NoDevice": "" },
                            { "DeviceName": "xvdck", "NoDevice": "" }, { "DeviceName": "xvdcl", "NoDevice": "" }, { "DeviceName": "xvdcm", "NoDevice": "" }, { "DeviceName": "xvdcn", "NoDevice": "" }, { "DeviceName": "xvdco", "NoDevice": "" },
                            { "DeviceName": "xvdcp", "NoDevice": "" }, { "DeviceName": "xvdcq", "NoDevice": "" }, { "DeviceName": "xvdcr", "NoDevice": "" }, { "DeviceName": "xvdcs", "NoDevice": "" }, { "DeviceName": "xvdct", "NoDevice": "" },
                            { "DeviceName": "xvdcu", "NoDevice": "" }, { "DeviceName": "xvdcv", "NoDevice": "" }, { "DeviceName": "xvdcw", "NoDevice": "" }, { "DeviceName": "xvdcx", "NoDevice": "" }, { "DeviceName": "xvdcy", "NoDevice": "" },
                            { "DeviceName": "xvdcz", "NoDevice": "" }
                        ],
                        "IamInstanceProfile": {
                            "Arn": { "Fn::ImportValue": "CiRoleProfile" }
                        },
                        "NetworkInterfaces": [{
                            "AssociatePublicIpAddress": "true",
                            "DeviceIndex": "0",
                            "DeleteOnTermination": "true",
                            "SubnetId": { "Fn::ImportValue": "MneSubnetId" }
                        }],
                        "UserData": {
                            "Fn::Base64": {
                                "Fn::Join": ["\n", [
                                    "<powershell>",
                                    "net user Administrator 'Qwerty123'",
                                    "$RegPath = 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon'",
                                    "Set-ItemProperty $RegPath 'AutoAdminLogon' -Value '1' -type String",
                                    "Set-ItemProperty $RegPath 'DefaultUsername' -Value 'Administrator' -type String",
                                    "Set-ItemProperty $RegPath 'DefaultPassword' -Value 'Qwerty123' -type String",
                                    "$RoleArn='arn:aws:iam::084581010260:role\/MneAssignRole'",
                                    "$credentials = (Use-STSRole -RoleArn $RoleArn -RoleSessionName 'session1').Credentials",
                                    "Set-AWSCredentials -AccessKey $credentials.AccessKeyId -SecretKey $credentials.SecretAccessKey -SessionToken $credentials.SessionToken",
                                    "Read-S3Object -bucket mne-zhu -key Setup\\git.exe -file c:\\setup\\git.exe -Credential $credentials",
                                    "Start-Process c:\\setup\\git.exe '/silent' -PassThru | Wait-Process",
                                    "[Environment]::SetEnvironmentVariable(\"HOME\", \"/C/Windows/System32/config/systemprofile\", \"Machine\")",
                                    "Read-S3Object -bucket mne-zhu -keyprefix Setup\\keys -Folder C:\\Windows\\System32\\config\\systemprofile\\.ssh -Credential $credentials",
                                    "Read-S3Object -bucket mne-zhu -keyprefix Setup\\keys -Folder C:\\Users\\Administrator\\.ssh -Credential $credentials",
                                  	"[Environment]::SetEnvironmentVariable(\"Path\", $env:Path+\";C:\\Program Files\\Git\\bin\", \"Machine\")",
                                    "$env:path +=';C:\\Program Files\\Git\\bin'",
                                    "new-item -ItemType Directory c:\\fitnesse",
                                    "cd c:\\fitnesse",
                                    "bash -c 'ssh-keyscan git.labs.quest.com >> ~/.ssh/known_hosts'",
                                    "bash -c 'git init'",
                                    "bash -c 'git remote add origin ssh://git@git.labs.quest.com/mne/fitnesse.git'",
                                    "bash -c 'git config core.sparseCheckout true'",
                                    "bash -c 'echo \"CloudFormationTemplate\" >> .git/info/sparse-checkout'",
                                    "bash -c 'echo \"MNE\" >> .git/info/sparse-checkout'",
                                    { "Fn::Sub": ["bash -c 'git pull origin ${BranchName} --depth=1'", { "BranchName": { "Ref": "BranchName" } }] },
                                    { "Fn::Sub": ["bash -c 'git checkout ${BranchName}'", { "BranchName": { "Ref": "BranchName" } }] },
                                    { "Fn::Sub": ["tzutil /s '${TimeZone}'", { "TimeZone": { "Fn::FindInMap": ["TimeZone", { "Ref": "AWS::AccountId" }, "Zone"] } }] },
                                    "Rename-Computer -NewName MNE -Force",
                                    "copy-item c:\\fitnesse\\CloudFormationTemplate\\setup_image_dc.xml c:\\fitnesse\\CloudFormationTemplate\\running_steps.xml",
                                    "schtasks \/create \/tn 'setup' \/xml c:\\fitnesse\\CloudFormationTemplate\\task_execution.xml",
                                    "[Environment]::SetEnvironmentVariable('RoleArn',$RoleArn,'Machine')",
                                    "Restart-Computer",
                                    "</powershell>",
                                    "<persist>true</persist>"
                                ]]
                            }
                        }
                    }]
                }
            }
        },
        "GetDcImageId": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Version": "1.0",
            "Properties": {
                "ServiceToken": { "Fn::ImportValue": "GetImageIdFunction" },
                "Owner": { "Fn::FindInMap": ["ImageMap", "OriginImageInfo", "Owner"] },
                "ImageName": { "Fn::FindInMap": ["ImageMap", "OriginImageInfo", "ImageName"] }
            }
        },
        "UpdateDcInstanceInfo": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Version": "1.0",
            "Properties": {
                "ServiceToken": { "Fn::ImportValue": "MneUpdateInstanceInfoFunction" },
                "SpotId": { "Ref": "DC" },
                "InstanceTags": [{ "Key": "Name", "Value": { "Fn::Join": ["", [{ "Ref": "BranchName" }, ".Image.DC", { "Ref": "ExVersion" }, ".at-mne.com"]] } }],
                "R53Names": [{ "Fn::Join": ["", [{ "Ref": "BranchName" }, ".image.dc", { "Ref": "ExVersion" }]] }],
				"SecurityGroups":{"Fn::ImportValue":"MneSecurityGroups"}
            },
            "DependsOn": "DC"
        },
        "Exchange": {
            "Type": "AWS::EC2::SpotFleet",
            "Properties": {
                "SpotFleetRequestConfigData": {
                    "IamFleetRole": { "Fn::ImportValue": "CiRoleArn" },
                    "SpotPrice": "0.5",
                    "TargetCapacity": 1,
                    "LaunchSpecifications": [{
                        "EbsOptimized": "true",
                        "InstanceType": "m4.large",
                        "ImageId": { "Fn::GetAtt": ["GetExchImageId", "imageId"] },
                        "BlockDeviceMappings": [{
                                "DeviceName": "/dev/sda1",
                                "Ebs": {
                                    "VolumeSize": "48",
                                    "VolumeType": "gp2"
                                }

                            },
                            { "DeviceName": "xvdca", "NoDevice": "" }, { "DeviceName": "xvdcb", "NoDevice": "" }, { "DeviceName": "xvdcc", "NoDevice": "" }, { "DeviceName": "xvdcd", "NoDevice": "" }, { "DeviceName": "xvdce", "NoDevice": "" },
                            { "DeviceName": "xvdcf", "NoDevice": "" }, { "DeviceName": "xvdcg", "NoDevice": "" }, { "DeviceName": "xvdch", "NoDevice": "" }, { "DeviceName": "xvdci", "NoDevice": "" }, { "DeviceName": "xvdcj", "NoDevice": "" },
                            { "DeviceName": "xvdck", "NoDevice": "" }, { "DeviceName": "xvdcl", "NoDevice": "" }, { "DeviceName": "xvdcm", "NoDevice": "" }, { "DeviceName": "xvdcn", "NoDevice": "" }, { "DeviceName": "xvdco", "NoDevice": "" },
                            { "DeviceName": "xvdcp", "NoDevice": "" }, { "DeviceName": "xvdcq", "NoDevice": "" }, { "DeviceName": "xvdcr", "NoDevice": "" }, { "DeviceName": "xvdcs", "NoDevice": "" }, { "DeviceName": "xvdct", "NoDevice": "" },
                            { "DeviceName": "xvdcu", "NoDevice": "" }, { "DeviceName": "xvdcv", "NoDevice": "" }, { "DeviceName": "xvdcw", "NoDevice": "" }, { "DeviceName": "xvdcx", "NoDevice": "" }, { "DeviceName": "xvdcy", "NoDevice": "" },
                            { "DeviceName": "xvdcz", "NoDevice": "" }
                        ],
                        "IamInstanceProfile": {
                            "Arn": { "Fn::ImportValue": "CiRoleProfile" }
                        },
                        "NetworkInterfaces": [{
                            "AssociatePublicIpAddress": "true",
                            "DeviceIndex": "0",
                            "DeleteOnTermination": "true",
                            "SubnetId": { "Fn::ImportValue": "MneSubnetId" }
                        }],
                        "UserData": {
                            "Fn::Base64": {
                                "Fn::Join": ["\n", [
                                    "<powershell>",
                                    "net user Administrator 'Qwerty123'",
                                    "$RegPath = 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon'",
                                    "Set-ItemProperty $RegPath 'AutoAdminLogon' -Value '1' -type String",
                                    "Set-ItemProperty $RegPath 'DefaultUsername' -Value 'Administrator' -type String",
                                    "Set-ItemProperty $RegPath 'DefaultPassword' -Value 'Qwerty123' -type String",
                                    "$RoleArn='arn:aws:iam::084581010260:role\/MneAssignRole'",
                                    "$credentials = (Use-STSRole -RoleArn $RoleArn -RoleSessionName 'session1').Credentials",
                                    "Set-AWSCredentials -AccessKey $credentials.AccessKeyId -SecretKey $credentials.SecretAccessKey -SessionToken $credentials.SessionToken",
                                    "Read-S3Object -bucket mne-zhu -key Setup\\git.exe -file c:\\setup\\git.exe -Credential $credentials",
                                    "Start-Process c:\\setup\\git.exe '/silent' -PassThru | Wait-Process",
                                    "[Environment]::SetEnvironmentVariable(\"HOME\", \"/C/Windows/System32/config/systemprofile\", \"Machine\")",
                                    "Read-S3Object -bucket mne-zhu -keyprefix Setup\\keys -Folder C:\\Windows\\System32\\config\\systemprofile\\.ssh -Credential $credentials",
                                    "Read-S3Object -bucket mne-zhu -keyprefix Setup\\keys -Folder C:\\Users\\Administrator\\.ssh -Credential $credentials",
                                  	"[Environment]::SetEnvironmentVariable(\"Path\", $env:Path+\";C:\\Program Files\\Git\\bin\", \"Machine\")",
                                    "$env:path +=';C:\\Program Files\\Git\\bin'",
                                    "new-item -ItemType Directory c:\\fitnesse",
                                    "cd c:\\fitnesse",
                                    "bash -c 'ssh-keyscan git.labs.quest.com >> ~/.ssh/known_hosts'",
                                    "bash -c 'git init'",
                                    "bash -c 'git remote add origin ssh://git@git.labs.quest.com/mne/fitnesse.git'",
                                    "bash -c 'git config core.sparseCheckout true'",
                                    "bash -c 'echo \"CloudFormationTemplate\" >> .git/info/sparse-checkout'",
                                    { "Fn::Sub": ["bash -c 'git pull origin ${BranchName} --depth=1'", { "BranchName": { "Ref": "BranchName" } }] },
                                    { "Fn::Sub": ["bash -c 'git checkout ${BranchName}'", { "BranchName": { "Ref": "BranchName" } }] },
                                    { "Fn::Sub": ["tzutil /s '${TimeZone}'", { "TimeZone": { "Fn::FindInMap": ["TimeZone", { "Ref": "AWS::AccountId" }, "Zone"] } }] },
                                    { "Fn::Sub": ["Rename-Computer -NewName Exch${ExVersion} -Force", { "ExVersion": { "Ref": "ExVersion" } }] },
                                    { "Fn::Sub": ["copy-item c:\\fitnesse\\CloudFormationTemplate\\setup_image_exch${ExVersion}.xml c:\\fitnesse\\CloudFormationTemplate\\running_steps.xml", { "ExVersion": { "Ref": "ExVersion" } }] },
                                    "schtasks \/create \/tn 'setup' \/xml c:\\fitnesse\\CloudFormationTemplate\\task_execution.xml",
                                    { "Fn::Sub": ["Set-DnsClientServerAddress -InterfaceAlias 'Ethernet*' -ServerAddresses '${DcPrivateIp}'", { "DcPrivateIp": { "Fn::GetAtt": ["UpdateDcInstanceInfo", "privateip"] } }] },
                                    "[Environment]::SetEnvironmentVariable('RoleArn',$RoleArn,'Machine')",
                                    "Restart-Computer",
                                    "</powershell>",
                                    "<persist>true</persist>"
                                ]]
                            }
                        }
                    }]
                }
            }
        },
        "UpdateExchInstanceInfo": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Version": "1.0",
            "Properties": {
                "ServiceToken": { "Fn::ImportValue": "MneUpdateInstanceInfoFunction" },
                "SpotId": { "Ref": "Exchange" },
                "InstanceTags": [{ "Key": "Name", "Value": { "Fn::Join": ["", [{ "Ref": "BranchName" }, ".Image.Exch", { "Ref": "ExVersion" }, ".at-mne.com"]] } }],
                "R53Names": [{ "Fn::Join": ["", [{ "Ref": "BranchName" }, ".image.exch", { "Ref": "ExVersion" }]] }],
				"SecurityGroups":{"Fn::ImportValue":"MneSecurityGroups"}
            },
            "DependsOn": "Exchange"
        },
        "GetExchImageId": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Version": "1.0",
            "Properties": {
                "ServiceToken": { "Fn::ImportValue": "GetImageIdFunction" },
                "Owner": { "Fn::FindInMap": ["ImageMap", "OriginImageInfo", "Owner"] },
                "ImageName": { "Fn::FindInMap": ["ImageMap", "OriginImageInfo", "ImageName"] }
            }
        },
        "SSDM": {
            "Type": "AWS::EC2::SpotFleet",
            "Properties": {
                "SpotFleetRequestConfigData": {
                    "IamFleetRole": { "Fn::ImportValue": "CiRoleArn" },
                    "SpotPrice": "0.5",
                    "TargetCapacity": 1,
                    "LaunchSpecifications": [{
                        "EbsOptimized": "true",
                        "InstanceType": "m4.large",
                        "ImageId": { "Fn::GetAtt": ["GetSSDMImageId", "imageId"] },
                        "BlockDeviceMappings": [{
                                "DeviceName": "/dev/sda1",
                                "Ebs": {
                                    "VolumeSize": "48",
                                    "VolumeType": "gp2"
                                }

                            },
                            { "DeviceName": "xvdca", "NoDevice": "" }, { "DeviceName": "xvdcb", "NoDevice": "" }, { "DeviceName": "xvdcc", "NoDevice": "" }, { "DeviceName": "xvdcd", "NoDevice": "" }, { "DeviceName": "xvdce", "NoDevice": "" },
                            { "DeviceName": "xvdcf", "NoDevice": "" }, { "DeviceName": "xvdcg", "NoDevice": "" }, { "DeviceName": "xvdch", "NoDevice": "" }, { "DeviceName": "xvdci", "NoDevice": "" }, { "DeviceName": "xvdcj", "NoDevice": "" },
                            { "DeviceName": "xvdck", "NoDevice": "" }, { "DeviceName": "xvdcl", "NoDevice": "" }, { "DeviceName": "xvdcm", "NoDevice": "" }, { "DeviceName": "xvdcn", "NoDevice": "" }, { "DeviceName": "xvdco", "NoDevice": "" },
                            { "DeviceName": "xvdcp", "NoDevice": "" }, { "DeviceName": "xvdcq", "NoDevice": "" }, { "DeviceName": "xvdcr", "NoDevice": "" }, { "DeviceName": "xvdcs", "NoDevice": "" }, { "DeviceName": "xvdct", "NoDevice": "" },
                            { "DeviceName": "xvdcu", "NoDevice": "" }, { "DeviceName": "xvdcv", "NoDevice": "" }, { "DeviceName": "xvdcw", "NoDevice": "" }, { "DeviceName": "xvdcx", "NoDevice": "" }, { "DeviceName": "xvdcy", "NoDevice": "" },
                            { "DeviceName": "xvdcz", "NoDevice": "" }
                        ],
                        "IamInstanceProfile": {
                            "Arn": { "Fn::ImportValue": "CiRoleProfile" }
                        },
                        "NetworkInterfaces": [{
                            "AssociatePublicIpAddress": "true",
                            "DeviceIndex": "0",
                            "DeleteOnTermination": "true",
                            "SubnetId": { "Fn::ImportValue": "MneSubnetId" }
                        }],
                        "UserData": {
                            "Fn::Base64": {
                                "Fn::Join": ["\n", [
                                    "<powershell>",
                                    "net user Administrator 'Qwerty123'",
                                    "$RegPath = 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon'",
                                    "Set-ItemProperty $RegPath 'AutoAdminLogon' -Value '1' -type String",
                                    "Set-ItemProperty $RegPath 'DefaultUsername' -Value 'Administrator' -type String",
                                    "Set-ItemProperty $RegPath 'DefaultPassword' -Value 'Qwerty123' -type String",
                                    "$RoleArn='arn:aws:iam::084581010260:role\/MneAssignRole'",
                                    "$credentials = (Use-STSRole -RoleArn $RoleArn -RoleSessionName 'session1').Credentials",
                                    "Set-AWSCredentials -AccessKey $credentials.AccessKeyId -SecretKey $credentials.SecretAccessKey -SessionToken $credentials.SessionToken",
                                    "Read-S3Object -bucket mne-zhu -key Setup\\git.exe -file c:\\setup\\git.exe -Credential $credentials",
                                    "Start-Process c:\\setup\\git.exe '/silent' -PassThru | Wait-Process",
                                    "[Environment]::SetEnvironmentVariable(\"HOME\", \"/C/Windows/System32/config/systemprofile\", \"Machine\")",
                                    "Read-S3Object -bucket mne-zhu -keyprefix Setup\\keys -Folder C:\\Windows\\System32\\config\\systemprofile\\.ssh -Credential $credentials",
                                    "Read-S3Object -bucket mne-zhu -keyprefix Setup\\keys -Folder C:\\Users\\Administrator\\.ssh -Credential $credentials",
                                  	"[Environment]::SetEnvironmentVariable(\"Path\", $env:Path+\";C:\\Program Files\\Git\\bin\", \"Machine\")",
                                    "$env:path +=';C:\\Program Files\\Git\\bin'",
                                    "new-item -ItemType Directory c:\\fitnesse",
                                    "cd c:\\fitnesse",
                                    "bash -c 'ssh-keyscan git.labs.quest.com >> ~/.ssh/known_hosts'",
                                    "bash -c 'git init'",
                                    "bash -c 'git remote add origin ssh://git@git.labs.quest.com/mne/fitnesse.git'",
                                    "bash -c 'git config core.sparseCheckout true'",
                                    "bash -c 'echo \"CloudFormationTemplate\" >> .git/info/sparse-checkout'",
                                    { "Fn::Sub": ["bash -c 'git pull origin ${BranchName} --depth=1'", { "BranchName": { "Ref": "BranchName" } }] },
                                    { "Fn::Sub": ["bash -c 'git checkout ${BranchName}'", { "BranchName": { "Ref": "BranchName" } }] },
                                    { "Fn::Sub": ["tzutil /s '${TimeZone}'", { "TimeZone": { "Fn::FindInMap": ["TimeZone", { "Ref": "AWS::AccountId" }, "Zone"] } }] },
                                    "Rename-Computer -NewName SSDM -Force",
                                    "copy-item c:\\fitnesse\\CloudFormationTemplate\\setup_image_ssdm.xml c:\\fitnesse\\CloudFormationTemplate\\running_steps.xml",
                                    "schtasks \/create \/tn 'setup' \/xml c:\\fitnesse\\CloudFormationTemplate\\task_execution.xml",
                                    { "Fn::Sub": ["Set-DnsClientServerAddress -InterfaceAlias 'Ethernet*' -ServerAddresses '${DcPrivateIp}'", { "DcPrivateIp": { "Fn::GetAtt": ["UpdateDcInstanceInfo", "privateip"] } }] },
                                    "[Environment]::SetEnvironmentVariable('RoleArn',$RoleArn,'Machine')",
                                    "Restart-Computer",
                                    "</powershell>",
                                    "<persist>true</persist>"
                                ]]
                            }
                        }
                    }]
                }
            }
        },
        "UpdateSSDMInstanceInfo": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Version": "1.0",
            "Properties": {
                "ServiceToken": { "Fn::ImportValue": "MneUpdateInstanceInfoFunction" },
                "SpotId": { "Ref": "SSDM" },
                "InstanceTags": [{ "Key": "Name", "Value": { "Fn::Join": ["", [{ "Ref": "BranchName" }, ".Image.SSDM.at-mne.com"]] } }],
                "R53Names": [{ "Fn::Join": ["", [{ "Ref": "BranchName" }, ".image.ssdm"]] }],
				"SecurityGroups":{"Fn::ImportValue":"MneSecurityGroups"}
            },
            "DependsOn": "SSDM"
        },
        "GetSSDMImageId": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Version": "1.0",
            "Properties": {
                "ServiceToken": { "Fn::ImportValue": "GetImageIdFunction" },
                "Owner": { "Fn::FindInMap": ["ImageMap", "OriginImageInfo", "Owner"] },
                "ImageName": { "Fn::FindInMap": ["ImageMap", "OriginImageInfo", "ImageName"] }
            }
        }
    },
    "Outputs": {
        "DcPrivateIp": {
            "Description": "The priviate ip of dc",
            "Value": { "Fn::GetAtt": ["UpdateDcInstanceInfo", "privateip"] },
            "Export": {
                "Name": { "Fn::Join": [":", [{ "Ref": "AWS::StackName" }, "DcPrivateIp"]] }
            }
        },
        "DcInstanceId": {
            "Description": "The instance id",
            "Value": { "Fn::GetAtt": ["UpdateDcInstanceInfo", "instanceId"] },
            "Export": {
                "Name": { "Fn::Join": [":", [{ "Ref": "AWS::StackName" }, "DcInstanceId"]] }
            }
        },
        "ExchInstanceId": {
            "Description": "The instance id",
            "Value": { "Fn::GetAtt": ["UpdateExchInstanceInfo", "instanceId"] },
            "Export": {
                "Name": { "Fn::Join": [":", [{ "Ref": "AWS::StackName" }, "ExchInstanceId"]] }
            }
        },
        "SSDMInstanceId": {
            "Description": "The instance id",
            "Value": { "Fn::GetAtt": ["UpdateSSDMInstanceInfo", "instanceId"] },
            "Export": {
                "Name": { "Fn::Join": [":", [{ "Ref": "AWS::StackName" }, "SSDMInstanceId"]] }
            }
        }
    }
}
